plugins {
    kotlin("multiplatform")
    kotlin("plugin.serialization")
    id("com.github.johnrengelman.shadow")
    application
}

group = "${rootProject.group}"
version = "${rootProject.version}"
val artifactName by extra { "${rootProject.name.toLowerCase()}-${project.name.toLowerCase()}" }
val rootPackage: String by rootProject.extra
val projectPackage: String by extra { "${rootPackage}.${project.name.toLowerCase()}" }
val theMainClass: String by extra { "App" }
application {
    mainClass.set("${projectPackage}.${theMainClass}" + "Kt") // + "Kt" if fun main is outside a class
}

kotlin {
    jvmToolchain(BuildSrcGlobal.jdkVersion)
    jvm {
        testRuns["test"].executionTask.configure {
            //useJUnit()
            useJUnitPlatform() // execute with testImplementation("org.junit.jupiter:junit-jupiter-engine")
        }
    }
    when (BuildSrcGlobal.hostOS) {
        BuildSrcGlobal.HOSTOS.MACOS -> macosX64 {
            binaries {
                executable {
                    // entry point function = package with non-inside-object main method + ".main" (= name of the main function)
                    entryPoint("${projectPackage}.main")
                }
            }
        }
        BuildSrcGlobal.HOSTOS.LINUX -> linuxX64 {
            binaries {
                executable {
                    // entry point function = package with non-inside-object main method + ".main" (= name of the main function)
                    entryPoint("${projectPackage}.main")
                }
            }
        }
        BuildSrcGlobal.HOSTOS.WINDOWS -> mingwX64 {
            binaries {
                executable {
                    // entry point function = package with non-inside-object main method + ".main" (= name of the main function)
                    entryPoint("${projectPackage}.main")
                }
            }
        }
        else -> throw GradleException("Host OS is not supported in Kotlin/Native: ${BuildSrcGlobal.hostOS} from '${System.getProperty("os.name")}'")
    }
    sourceSets {
        val commonMain by getting  { // predefined by gradle multiplatform plugin
            dependencies {
                implementation(project(":lib"))
                implementation("io.github.microutils:kotlin-logging".depAndVersion())
                implementation("org.jetbrains.kotlinx:kotlinx-datetime".depAndVersion())
                //api(platform("com.squareup.okio:okio-bom".depAndVersion())
                implementation("com.squareup.okio:okio".depAndVersion())
                implementation("org.jetbrains.kotlinx:kotlinx-serialization-json".depAndVersion())
                //implementation("com.charleskorn.kaml:kaml".depAndVersion())
                implementation("net.mamoe.yamlkt:yamlkt".depAndVersion())

                implementation("com.github.ajalt.clikt:clikt".depAndVersion())
            }
        }
        val commonTest by getting {
            dependencies {
            }
        }

        val jvmMain by getting {
            //print("${name} dependsOn: ")
            //println(dependsOn.map { it.name }.joinToString())
            dependencies {
                runtimeOnly("ch.qos.logback:logback-classic") { version { strictly("ch.qos.logback:logback-classic".depVersionOnly()) } }
                //implementation("org.slf4j:slf4j-api:1.7.30")
            }
        }
        val jvmTest by getting {
            dependencies {
                //implementation(kotlin("test-junit"))
                //implementation(kotlin("test-common"))
                //implementation(kotlin("test-annotations-common"))
            }
        }
        when (BuildSrcGlobal.hostOS) {
            BuildSrcGlobal.HOSTOS.MACOS -> {
                val macosX64Main by getting {
                    dependencies {
            }}}
            BuildSrcGlobal.HOSTOS.LINUX -> {
                val linuxX64Main by getting {
                    dependencies {
            }}}
            BuildSrcGlobal.HOSTOS.WINDOWS -> {
                val mingwX64Main by getting {
                    dependencies {
            }}}
            else -> throw GradleException("Host OS is not supported in Kotlin/Native.")
        }
    }
}

//tasks.getByName<JavaExec>("run") {
//    classpath(tasks.getByName<Jar>("jvmJar")) // so that the JS artifacts generated by `jvmJar` can be found and served
//}

tasks {
    named<JavaExec>("run") {
        standardInput = System.`in`
        workingDir = rootProject.projectDir
        classpath += objects.fileCollection().from(
            named("compileKotlinJvm"),
            configurations.named("jvmRuntimeClasspath")
        )
        classpath += files("$buildDir/processedResources/jvm/main")
    }
    shadowJar {
        manifest { attributes["Main-Class"] = "${projectPackage}.${theMainClass}" + "Kt" }
        archiveClassifier.set("fat")
        val jvmJar = named<org.gradle.jvm.tasks.Jar>("jvmJar").get()
        from(jvmJar.archiveFile)
        configurations.add(project.configurations.named("jvmRuntimeClasspath").get())
    }
}

// ################################################################################################
// #####    pure informational stuff on stdout    #################################################
// ################################################################################################
tasks.register("printClasspath") {
    group = "misc"
    description = "print classpath"
    doLast {
        //project.getConfigurations().filter { it.isCanBeResolved }.forEach {
        //    println(it.name)
        //}
        //println()
        val targets = listOf(
            "metadataCommonMainCompileClasspath",
            "commonMainApiDependenciesMetadata",
            "commonMainImplementationDependenciesMetadata",
            "jvmCompileClasspath",
            "kotlinCompilerClasspath"
        )
        targets.forEach { targetConfiguration ->
            println("$targetConfiguration:")
            println("=".repeat("$targetConfiguration:".length))
            project.getConfigurations()
                .getByName(targetConfiguration).files
                // filters only existing and non-empty dirs
                .filter { (it.isDirectory() && it.listFiles().isNotEmpty()) || it.isFile() }
                .forEach { println(it) }
        }
    }
}
